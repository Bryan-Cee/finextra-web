import { TRPCClient, TRPCClientError } from '@trpc/client';
import { AnyProcedure, AnyQueryProcedure, AnyRouter, Filter, inferProcedureInput } from '@trpc/server';
import { inferTransformedProcedureOutput } from '@trpc/server/shared';
import { TrpcQueryOptionsForUseQueries } from '../../internals/useQueries';
declare type GetQueryOptions<TRouter extends AnyRouter, TProcedure extends AnyProcedure, TPath extends string> = <TData = inferTransformedProcedureOutput<TProcedure>>(input: inferProcedureInput<TProcedure>, opts?: TrpcQueryOptionsForUseQueries<TPath, inferProcedureInput<TProcedure>, inferTransformedProcedureOutput<TProcedure>, TData, TRPCClientError<TRouter>>) => TrpcQueryOptionsForUseQueries<TPath, inferProcedureInput<TProcedure>, inferTransformedProcedureOutput<TProcedure>, TData, TRPCClientError<TRouter>>;
/**
 * @internal
 */
export declare type UseQueriesProcedureRecord<TRouter extends AnyRouter, TPath extends string = ''> = {
    [TKey in keyof Filter<TRouter['_def']['record'], AnyRouter | AnyQueryProcedure>]: TRouter['_def']['record'][TKey] extends AnyRouter ? UseQueriesProcedureRecord<TRouter['_def']['record'][TKey], `${TPath}${TKey & string}.`> : GetQueryOptions<TRouter, TRouter['_def']['record'][TKey], `${TPath}${TKey & string}`>;
};
/**
 * Create proxy for `useQueries` options
 * @internal
 */
export declare function createUseQueriesProxy<TRouter extends AnyRouter>(client: TRPCClient<TRouter>): UseQueriesProcedureRecord<TRouter, "">;
export {};
//# sourceMappingURL=useQueriesProxy.d.ts.map