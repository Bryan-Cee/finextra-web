"use strict";

exports.__esModule = true;
exports.theme = exports.plugin = void 0;

var _colors = _interopRequireDefault(require("tailwindcss/colors"));

var _withAlphaVariable = require("tailwindcss/lib/util/withAlphaVariable");

var _transformThemeValue = _interopRequireDefault(require("tailwindcss/lib/util/transformThemeValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-ignore
// @ts-ignore
const opts = {
  respectImportant: false,
  respectPrefix: false
};

function hasAlpha(color) {
  return color.startsWith('rgba(') || color.startsWith('hsla(') || color.startsWith('#') && color.length === 9 || color.startsWith('#') && color.length === 5;
}

const theme = {
  rwCore: theme => ({
    fontWeight: null,
    fontSize: (0, _transformThemeValue.default)('fontSize')(theme('fontSize.base', '1em')),
    backgroundClip: 'padding-box',
    borderRadius: theme('borderRadius.DEFAULT', '4px'),
    backgroundColor: theme('colors.white', _colors.default.white),
    color: theme('textColor.DEFAULT', 'currentColor'),
    borderColor: theme('borderColor.DEFAULT', _colors.default.gray[300]),
    hoverBackgroundColor: theme('colors.gray.200', _colors.default.gray[200]),
    hoverBorderColor: theme('colors.gray.200', _colors.default.gray[200]),
    hoverColor: null,
    focusWidth: theme('ringWidth.DEFAULT', '3px'),
    focusColor: theme('ringColor.DEFAULT', 'rgba(0, 123, 255, 0.5)'),
    focusBoxShadow: '0 0 0 var(--rw-core-focus-width) var(--rw-core-focus-color)',
    focusTransition: null // 'box-shadow 0.15s ease-in-out',

  }),
  rwButton: theme => ({
    alignItems: null,
    // TD
    justifyContent: null,
    // TD
    paddingLeft: null,
    paddingRight: null,
    color: theme('rwCore.color'),
    borderColor: null,
    backgroundColor: null,
    backgroundClip: theme('rwCore.backgroundClip'),
    borderRadius: theme('borderRadius.DEFAULT', '4px'),
    disabledBackgroundColor: theme('colors.gray.200', _colors.default.gray[200]),
    hoverColor: null,
    hoverBorderColor: null,
    hoverBackgroundColor: theme('colors.gray.200', _colors.default.gray[200]),
    activeColor: null,
    activeBorderColor: null,
    activebackgroundColor: theme('colors.gray.300', _colors.default.gray[300])
  }),
  rwInput: theme => ({
    height: theme('height.10'),
    color: theme('colors.gray.700', _colors.default.gray[700]),
    caretColor: null,
    boxShadow: null,
    // 'inset 0 1px 1px rgba(0, 0, 0, 0.075)',
    paddingX: theme('padding.4'),
    backgroundColor: theme('rwCore.backgroundColor'),
    placeholderColor: '#999',
    borderWidth: '1px',
    borderColor: theme('borderColor.DEFAULT', _colors.default.gray[300]),
    borderRadius: theme('borderRadius.DEFAULT', '4px'),
    disabledBackgroundColor: theme('colors.gray.200', _colors.default.gray[200]),
    disabledBorderColor: null,
    disabledColor: null,
    disabledPlaceholderColor: '#999',
    focusBackgroundColor: null,
    focusBorderColor: null,
    focusColor: null,
    autofillBackgroundColor: 'rgb(232, 240, 254)',
    autofillColor: 'rgb(0, 0, 0)'
  }),
  rwInputAddon: theme => ({
    width: theme('width.10'),
    borderColor: theme('rwInput.borderColor')
  })
};
exports.theme = theme;

const plugin = ({
  theme,
  addComponents,
  addUtilities,
  addBase
}) => {
  addBase({
    "@keyframes react-widgets-autofill-start": {
      "from": {},
      "to": {}
    },
    "@keyframes react-widgets-autofill-cancel": {
      "from": {},
      "to": {}
    }
  });
  const utils = {
    ".rw-btn-input-reset": {
      "padding": "0",
      "margin": "0",
      "border": "none",
      "color": "inherit",
      "boxShadow": "none",
      "background": "none",
      "font": "inherit",
      "lineHeight": "inherit",
      "msTouchAction": "manipulation",
      "touchAction": "manipulation",
      "outline": "0"
    },
    ".rw-input-base": {
      "caretColor": theme('rwInput.caretColor'),
      "&:disabled": {
        "WebkitTextFillColor": theme('rwInput.disabledColor'),
        "opacity": 1
      }
    }
  };
  const focusShadow = theme('rwCore.focusBoxShadow');
  let focusColor = theme('rwCore.focusColor');
  if (!hasAlpha(focusColor)) focusColor = (0, _withAlphaVariable.withAlphaValue)(focusColor, theme('ringOpacity.DEFAULT', 0.5));
  utils['.rw-focus-ring'] = Object.assign({}, focusShadow ? {
    '--rw-core-focus-width': theme('rwCore.focusWidth'),
    '--rw-core-focus-color': focusColor,
    boxShadow: focusShadow,
    transition: theme('rwCore.focusTransition')
  } : null);
  addUtilities(utils, opts);
  const components = {
    ".rw-btn": {
      "@apply rw-btn-input-reset inline-flex items-center justify-center cursor-pointer focus:outline-none": "true",
      "backgroundClip": theme('rwButton.backgroundClip'),
      "&:disabled,\n      fieldset[disabled] &,\n      \n      .rw-state-disabled &,\n      .rw-state-readonly &": {
        "cursor": "inherit"
      },
      "fieldset[disabled] &": {
        "pointerEvents": "none"
      }
    },
    ".rw-picker-caret,\n    .rw-picker-btn": {
      "color": theme('rwButton.color'),
      "alignItems": theme('rwButton.align-items'),
      "justifyContent": theme('rwButton.justifyContent'),
      "paddingLeft": theme('rwButton.paddingLeft'),
      "paddingRight": theme('rwButton.paddingRight')
    },
    ".rw-picker-btn": {
      "backgroundColor": theme('rwButton.backgroundColor'),
      "&:hover": {
        "color": theme('rwButton.hoverColor'),
        "backgroundColor": theme('rwButton.hoverBackgroundColor')
      },
      "&:active": {
        "color": theme('rwButton.activeColor'),
        "backgroundColor": theme('rwButton.activeBackgroundColor')
      },
      "&:disabled,\n      fieldset[disabled] &": {
        "backgroundColor": theme('rwButton.disabledBackgroundColor')
      }
    },
    ".rw-input-addon": {
      "&,\n      &.rw-picker-btn": {
        "borderLeft": `${theme('rwInputAddon.borderColor')} 1px solid`,
        "[dir='rtl'] &": {
          "borderRight": `${theme('rwButton.borderColor')} 1px solid`,
          "borderLeft": "none"
        }
      }
    },
    ".rw-sr": {
      "@apply sr-only": "true"
    },
    ".rw-widget": {
      "border": "none",
      "color": theme('rwCore.color'),
      "fontWeight": theme('rwCore.fontWeight'),
      "fontSize": theme('rwCore.fontSize'),
      "fontFamily": theme('rwCore.fontFamily'),
      "outline": "none",
      "position": "relative"
    },
    ".rw-state-readonly,\n    .rw-state-disabled,\n    fieldset[disabled] .rw-widget": {
      "cursor": "not-allowed"
    },
    ".rw-widget-picker": {
      "display": "grid",
      "overflow": "hidden",
      "minHeight": theme('rwInput.height'),
      "backgroundColor": theme('rwInput.backgroundColor'),
      "border": `${theme('rwInput.borderColor')} ${theme('rwInput.borderWidth')}
        solid`,
      "borderRadius": theme('rwInput.borderRadius'),
      "outline": "none",
      "gridTemplate": `1fr / 1fr ${theme('rwInputAddon.width')}`,
      "width": "100%",
      "&.rw-hide-caret": {
        "gridTemplateColumns": "1fr"
      },
      ".rw-state-focus &": {
        "@apply rw-focus-ring": "true",
        "color": theme('rwInput.focusColor'),
        "backgroundColor": theme('rwInput.focusBackgroundColor'),
        "borderColor": theme('rwInput.focusBorderColor'),
        "&.rw-widget-input": {
          "boxShadow": theme('rwInput.boxShadow') && focusShadow ? `${focusShadow}, ${theme('rwInput.boxShadow')}` : null
        }
      }
    },
    ".rw-input": {
      "@apply rw-btn-input-reset rw-input-base": "true",
      "padding": `0 ${theme('rwInput.paddingX')}`,
      "&[type='text']::-ms-clear": {
        "display": "none"
      },
      "&:disabled,\n      &:read-only": {
        "cursor": "inherit"
      }
    },
    ".rw-widget-input": {
      "color": theme('rwInput.color'),
      "backgroundColor": theme('rwInput.backgroundColor'),
      "boxShadow": theme('rwInput.boxShadow'),
      "backgroundClip": theme('rwCore.backgroundClip'),
      "&.rw-state-disabled,\n      .rw-state-disabled &,\n      fieldset[disabled] &": {
        "color": theme('rwInput.disabledColor'),
        "backgroundColor": theme('rwInput.disabledBackgroundColor'),
        "borderColor": theme('rwInput.disabledBorderColor')
      }
    },
    ".rw-placeholder,\n    .rw-input::placeholder": {
      "color": theme('rwInput.placeholderColor'),
      ".rw-state-disabled &": {
        "color": theme('rwInput.disabledPlaceholderColor')
      }
    },
    ".rw-detect-autofill": {
      "@apply rw-btn-input-reset rw-input-base": "true"
    },
    ".rw-detect-autofill:-webkit-autofill": {
      "animationName": "react-widgets-autofill-start",
      "animationDuration": "0.01ms"
    },
    ".rw-detect-autofill:not(:-webkit-autofill)": {
      "animationName": "react-widgets-autofill-cancel",
      "animationDuration": "0.01ms"
    },
    ".rw-webkit-autofill .rw-widget-container,\n    .rw-input:-webkit-autofill": {
      "backgroundColor": `${theme('rwInput.autofillBackgroundColor')} !important`,
      "backgroundImage": "none !important",
      "color": `${theme('rwInput.autofillColor')} !important`
    }
  };
  addComponents(components, opts);
};

exports.plugin = plugin;