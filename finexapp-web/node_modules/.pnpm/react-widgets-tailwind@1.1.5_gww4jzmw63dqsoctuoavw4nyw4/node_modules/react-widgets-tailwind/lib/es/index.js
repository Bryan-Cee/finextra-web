const _excluded = ["addBase", "addComponents", "addUtilities"];

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import plugin from 'tailwindcss/plugin';
import * as Widget from './widget';
import * as Popup from './popup';
import * as List from './list';
import * as Combobox from './combobox';
import * as Multiselect from './multiselect';
import * as DatePicker from './datepicker';
import * as Calendar from './calendar';
import * as DropdownList from './dropdownlist';
import * as NumberPicker from './numberpicker';
import * as TimeInput from './timeinput';
import * as Listbox from './listbox';

const isEmpty = value => {
  return value == null || value === 'null' || value === 'undefined' || value === '';
};

function removeEmpty(value) {
  if (Array.isArray(value)) {
    value.forEach(removeEmpty);
    return value;
  }

  if (value && typeof value === 'object') {
    for (let [key, v] of Object.entries(value)) {
      if (isEmpty(v)) {
        delete value[key];
      } else {
        removeEmpty(v);
      }
    }

    return value;
  }

  return value;
}

function wrap(fn, options) {
  return (decls, ...args) => {
    // console.log(removeEmpty(decls))
    return fn(removeEmpty(decls), options, ...args);
  };
}

const ComponentPlugins = {
  Popup: Popup,
  List: List,
  Listbox: Listbox,
  Autocomplete: null,
  Combobox: Combobox,
  Multiselect: Multiselect,
  DatePicker: DatePicker,
  Calendar: Calendar,
  DropdownList: DropdownList,
  NumberPicker: NumberPicker,
  TimeInput: TimeInput
};
const dependencies = {
  List: [],
  Popup: [],
  Listbox: ['List'],
  DropdownList: ['List', 'Popup'],
  Combobox: ['List', 'Popup'],
  Autocomplete: ['List', 'Popup', 'Combobox'],
  Multiselect: ['List', 'Popup'],
  DatePicker: ['Popup', 'Calendar'],
  Calendar: [],
  TimeInput: [],
  NumberPicker: []
};

function sort(components) {
  const visited = new Set();

  const topo = comp => {
    const deps = dependencies[comp] || [];
    let result = [];

    for (let dep of deps) {
      if (!visited.has(dep)) {
        result.push(...topo(dep));
      }
    }

    visited.add(comp);
    result.push(comp);
    return result;
  };

  return components.reduce((result, c) => [...result, ...topo(c)], []);
}

const defaultComponents = Object.keys(dependencies);
export default plugin.withOptions(({
  components: _components = defaultComponents
} = {}) => {
  const enabled = sort(_components);
  return _ref => {
    let {
      addBase,
      addComponents,
      addUtilities
    } = _ref,
        args = _objectWithoutPropertiesLoose(_ref, _excluded);

    const api = Object.assign({
      addBase: wrap(addBase),
      addUtilities: wrap(addUtilities, {
        respectImportant: false
      }),
      addComponents: wrap(addComponents)
    }, args);
    Widget.plugin(api);
    enabled.forEach(comp => {
      var _ComponentPlugins$com;

      (_ComponentPlugins$com = ComponentPlugins[comp]) == null ? void 0 : _ComponentPlugins$com.plugin(api);
    });
  };
}, ({
  components: _components2 = defaultComponents
} = {}) => {
  const enabled = sort(_components2);
  return {
    theme: Object.assign({}, Widget.theme, ...enabled.map(c => {
      var _ComponentPlugins$c;

      return (_ComponentPlugins$c = ComponentPlugins[c]) == null ? void 0 : _ComponentPlugins$c.theme;
    }))
  };
});