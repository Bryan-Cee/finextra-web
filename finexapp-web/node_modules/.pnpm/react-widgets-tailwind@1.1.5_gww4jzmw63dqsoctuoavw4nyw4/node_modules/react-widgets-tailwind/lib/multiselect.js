"use strict";

exports.__esModule = true;
exports.theme = exports.plugin = void 0;

var _colors = _interopRequireDefault(require("tailwindcss/colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const theme = {
  rwMultiselect: theme => {
    const input = theme('rwInput');
    const gutter = 0.115;
    return {
      tagPaddingInlineStart: theme('padding[1.5]'),
      tagPaddingInlineEnd: theme('padding[1.5]'),
      tagColor: null,
      tagBorderColor: theme('colors.gray.300', _colors.default.gray[300]),
      tagBackgroundColor: theme('colors.gray.300', _colors.default.gray[300]),
      tagGutter: `calc(${input.height} * ${gutter} - ${input.borderWidth})`,
      tagHeight: `calc(${input.height} * ${1 - gutter * 2})`,
      tagBorderRadius: theme('borderRadius.DEFAULT'),
      tagBtnPaddingY: 0,
      tagBtnPaddingX: theme('padding[1.5]'),
      tagBtnBackgroundColor: null,
      tagBtnBorderColor: null,
      tagBtnColor: null,
      tagBtnHoverBackgroundColor: null,
      tagBtnHoverBorderColor: null,
      tagBtnHoverColor: null,
      tagBtnActiveBackgroundColor: null,
      tagBtnActiveBorderColor: null,
      tagBtnActiveColor: null
    };
  }
};
exports.theme = theme;

const plugin = ({
  theme,
  addComponents
}) => {
  const input = theme('rwInput');
  const ms = theme('rwMultiselect');
  addComponents({
    ".rw-multiselect": {},
    ".rw-multiselect-input": {
      "@apply rw-btn-input-reset rw-input-base": "true",
      "height": `calc(${input.height} - ${input.borderWidth} * 2)`,
      "padding": `0 ${input.paddingX}`,
      "maxWidth": "100%",
      "&:disabled,\n      &:read-only": {
        "cursor": "inherit"
      }
    },
    ".rw-multiselect-taglist": {
      "@apply flex flex-wrap items-start w-full outline-none cursor-text": "true",
      ".rw-state-disabled &": {
        "cursor": "unset"
      }
    },
    ".rw-multiselect-tag": {
      "@apply inline-flex items-center overflow-hidden max-w-full": "true",
      "@apply cursor-default": "true",
      "color": ms.tagColor,
      "marginLeft": ms.tagGutter,
      "marginTop": ms.tagGutter,
      "minHeight": ms.tagHeight,
      "borderRadius": ms.tagBorderRadius,
      "backgroundColor": ms.tagBackgroundColor,
      "border": ms.tagBorderColor ? `1px solid ${ms.tagBorderColor}` : null,
      "[dir='rtl'] &": {
        "marginLeft": "0",
        "marginRight": ms.tagGutter,
        "padding": `0 ${ms.tagPaddingInlineStart} 0 ${ms.tagPaddingInlineEnd}`
      },
      "&.rw-state-focus": {
        "@apply rw-focus-ring": "true",
        "zindex": "1"
      },
      "&.rw-state-disabled,\n      fieldset[disabled] &": {
        "opacity": 0.65
      }
    },
    ".rw-multiselect-tag-label": {
      "padding": `0 ${ms.tagPaddingInlineEnd} 0 ${ms.tagPaddingInlineStart}`
    },
    ".rw-multiselect-tag-btn": {
      "@apply rw-btn-input-reset cursor-pointer self-stretch": "true",
      "padding": `${ms.tagBtnPaddingY} ${ms.tagBtnPaddingX}`,
      "color": ms.tagBtnColor,
      "borderColor": ms.tagBtnBorderColor,
      "backgroundColor": ms.tagBtnBackgroundColor,
      "&:hover": {
        "color": ms.tagBtnHoverColor,
        "borderColor": ms.tagBtnHoverBorderColor,
        "backgroundColor": ms.tagBtnHoverBackgroundColor
      },
      "&:active": {
        "color": ms.tagBtnActiveColor,
        "borderColor": ms.tagBtnActiveBorderColor,
        "backgroundColor": ms.tagBtnActiveBackgroundColor
      },
      "&:disabled": {
        "cursor": "inherit"
      },
      "@apply focus:outline-none": "true"
    }
  });
};

exports.plugin = plugin;