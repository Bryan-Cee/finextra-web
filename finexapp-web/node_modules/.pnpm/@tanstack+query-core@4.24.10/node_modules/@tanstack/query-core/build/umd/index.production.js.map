{"version":3,"file":"index.production.js","sources":["../../src/subscribable.ts","../../src/utils.ts","../../src/focusManager.ts","../../src/onlineManager.ts","../../src/retryer.ts","../../src/logger.ts","../../src/notifyManager.ts","../../src/removable.ts","../../src/query.ts","../../src/queryCache.ts","../../src/mutation.ts","../../src/mutationCache.ts","../../src/infiniteQueryBehavior.ts","../../src/queryObserver.ts","../../src/hydration.ts","../../src/infiniteQueryObserver.ts","../../src/mutationObserver.ts","../../src/queriesObserver.ts","../../src/queryClient.ts"],"sourcesContent":["type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.push(listener as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter((x) => x !== listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in window\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter((x) => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>,\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1) ? [{ ...arg2, queryKey: arg1 }, arg3] : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1)\n      ? [{ ...arg2, mutationKey: arg1 }, arg3]\n      : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n  return\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual?.(prevData, data)) {\n    return prevData as TData\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data)\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState,\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport type { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => boolean) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        const canContinue = isResolved || !shouldPause()\n        if (canContinue) {\n          continueResolve(value)\n        }\n        return canContinue\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n            return\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.()\n      return didContinue ? promise : Promise.resolve()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","export interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\nexport const defaultLogger: Logger = console\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport type { Retryer } from './retryer'\nimport { isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some((observer) => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error('undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = typeof data !== 'undefined'\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n","import type { QueryFilters } from './utils'\nimport { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from './utils'\nimport type { Action, QueryState } from './query'\nimport { Query } from './query'\nimport type { NotifyEvent, QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter((x) => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find((query) => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter((query) => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport type { Retryer } from './retryer'\nimport { canFetch, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return this.retryer?.continue() ?? this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n","import type { MutationObserver } from './mutationObserver'\nimport type { MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport type { Action, MutationState } from './mutation'\nimport { Mutation } from './mutation'\nimport type { MutationFilters } from './utils'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n  private resuming: Promise<unknown> | undefined\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find((mutation) => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    this.resuming = (this.resuming ?? Promise.resolve())\n      .then(() => {\n        const pausedMutations = this.mutations.filter((x) => x.state.isPaused)\n        return notifyManager.batch(() =>\n          pausedMutations.reduce(\n            (promise, mutation) =>\n              promise.then(() => mutation.continue().catch(noop)),\n            Promise.resolve() as Promise<unknown>,\n          ),\n        )\n      })\n      .then(() => {\n        this.resuming = undefined\n      })\n\n    return this.resuming\n  }\n}\n","import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData,\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: (context) => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal?.aborted) {\n                cancelled = true\n              } else {\n                context.signal?.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean,\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean,\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then((page) =>\n            buildNewPages(pages, param, page, previous),\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then((pages) => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i]),\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then((pages) => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n  return\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n  return\n}\n","import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach((mutation) => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach((query) => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach((dehydratedQuery) => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Reset fetch status to idle in the dehydrated state to avoid\n    // query being stuck in fetching state upon hydration\n    const dehydratedQueryState = {\n      ...dehydratedQuery.state,\n      fetchStatus: 'idle' as const,\n    }\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQueryState.dataUpdatedAt) {\n        query.setState(dehydratedQueryState)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQueryState,\n    )\n  })\n}\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n","import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObservers.find(\n          (observer) =>\n            observer.options.queryHash === defaultedOptions.queryHash,\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = matchingObservers.map(\n      (match) => match.defaultedQueryOptions.queryHash,\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash),\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) =>\n        !matchingObservers.some((match) => match.observer === prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import type { QueryFilters, Updater, MutationFilters } from './utils'\nimport {\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n  WithRequired,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private mountCount: number\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n    this.mountCount = 0\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\n        `Passing a custom logger has been deprecated and will be removed in the next major version.`,\n      )\n    }\n  }\n\n  mount(): void {\n    this.mountCount++\n    if (this.mountCount !== 1) return\n\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.mountCount--\n    if (this.mountCount !== 0) return\n\n    this.unsubscribeFocus?.()\n    this.unsubscribeFocus = undefined\n\n    this.unsubscribeOnline?.()\n    this.unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): TQueryFnData | undefined {\n    return this.queryCache.find<TQueryFnData>(queryKey, filters)?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: WithRequired<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: Omit<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: Omit<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'queryFn'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | WithRequired<\n          FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n          'queryKey'\n        >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const cachedData = this.getQueryData<TData>(parsedOptions.queryKey!)\n\n    return cachedData\n      ? Promise.resolve(cachedData)\n      : this.fetchQuery(parsedOptions)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): TQueryFnData | undefined {\n    const query = this.queryCache.find<TQueryFnData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.queryCache.find<TQueryFnData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions,\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(cancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          }),\n        ),\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>,\n  ): void {\n    const result = this.queryDefaults.find(\n      (x) => hashQueryKey(queryKey) === hashQueryKey(x.queryKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find((x) =>\n      partialMatchKey(queryKey, x.queryKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter((x) =>\n        partialMatchKey(queryKey, x.queryKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several query defaults match with key '${JSON.stringify(\n            queryKey,\n          )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>,\n  ): void {\n    const result = this.mutationDefaults.find(\n      (x) => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find((x) =>\n      partialMatchKey(mutationKey, x.mutationKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter((x) =>\n        partialMatchKey(mutationKey, x.mutationKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n            mutationKey,\n          )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey,\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n"],"names":["Subscribable","constructor","this","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","mutationKey","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","replaceData","prevData","data","isDataEqual","structuralSharing","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","canContinue","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","notifyManager","queue","transactions","notifyFn","batchNotifyFn","schedule","flush","originalQueue","batch","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","initialData","hasData","initialDataUpdatedAt","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchFailureReason","fetchMeta","isInvalidated","getDefaultState","meta","remove","setData","newData","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","AbortController","getAbortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","context","fetchFn","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","isFetchingOptimistic","_this$cache$config$on2","_this$cache$config2","Error","action","_action$meta","_action$dataUpdatedAt","reducer","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","_this$retryer$continu","execute","async","executeMutation","_this$options$retry","mutationFn","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","onSettled","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onError","_this$options4","_this$options$onSettl2","_this$options5","failureReason","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","_this$resuming","resuming","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","_context$signal","_context$signal2","aborted","queryFnResult","getNextPageParam","getPreviousPageParam","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","getQueryCache","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isFetching","isLoading","isError","isInitialLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","shouldNotifyListeners","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","fetchNextPage","fetchPreviousPage","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","_state$data","_state$data2","mutate","getMutationCache","currentMutation","_this$currentMutation","mutateOptions","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","getQueries","getObservers","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","queryCache","queryDefaults","mutationDefaults","mountCount","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","ensureQueryData","parsedOptions","cachedData","fetchQuery","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","dehydratedState","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","dehydratedQueryState"],"mappings":"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"}